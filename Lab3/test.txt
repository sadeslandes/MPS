//-------------------------------------------------------------------------------------------
// Includes
//-------------------------------------------------------------------------------------------
#include <c8051f120.h>				// SFR declarations.
#include <stdio.h>					// Necessary for printf.
#include "putget.h"					// Necessary for printf
//-------------------------------------------------------------------------------------------
// Global CONSTANTS
//-------------------------------------------------------------------------------------------
#define EXTCLK		22118400		// External oscillator frequency in Hz
#define SYSCLK		49766400		// Output of PLL derived from (EXTCLK * 9/4)
#define BAUDRATE	115200			// UART baud rate in bps
//#define BAUDRATE	19200			// UART baud rate in bps

//-------------------------------------------------------------------------------------------
// Function PROTOTYPES
//-------------------------------------------------------------------------------------------
void main(void);
void Port_Init(void);
void UART_Init(void);
void SYSCLK_Init(void);
void Timer_Init(void);
void UART0_ISR(void)__interrupt 4;
void UART1_ISR(void)__interrupt 20;

//-------------------------------------------------------------------------------------------
// Global variables
//------------------------------------------------------------------------------------------- 
char choice; 
//-------------------------------------------------------------------------------------------
// MAIN Routine
//-------------------------------------------------------------------------------------------
void main(void)
{
	SFRPAGE = CONFIG_PAGE;
	
	Port_Init();				// Configure the Crossbar and GPIO.
	UART_Init();				// Initialize UART0.
	Timer_Init();				//UART0 users Timer2 adn UART1 uses Timer 1
	SYSCLK_Init(); 				// 22.1884 with PLL of 9/4

	while (1)
	{
		SFRPAGE = UART0_PAGE;
		  		

		if(RI0)
		{
			ES0=1; 
			printf("%c \r\n", choice); 
			
			SFRPAGE = UART1_PAGE; 
			printf("%c \r\n", choice); 
			//while(!T10); 
		}

		SFRPAGE = UART1_PAGE; 

		if(RI1)
		{
			ES0 =0; 
			//ES1 =1;
			EIE2 = 0x40;  //jump to UART1 ISR  
			printf("%c \r\n", choice); 

			SFRPAGE = UART0_PAGE;
			printf("%c \r\n", choice); 
		} 


		
	}
}


//-------------------------------------------------------------------------------------------
// PORT_Init
//-------------------------------------------------------------------------------------------
//
// Configure the Crossbar and GPIO ports
//
void Port_Init(void)
{	
	char SFRPAGE_SAVE = SFRPAGE;	// Save Current SFR page.
	
	SFRPAGE = CONFIG_PAGE;

	WDTCN	= 0xDE;			// Disable watchdog timer.
	WDTCN	= 0xAD;

	P0MDOUT = 0x05; 		//Set P0.1 and P0.3 to open drain (RX0, RX1)
							//Set P0.0 and P0.2 to push-pull (TX0, TX1) 
	P0 = ~0x05;				//Sets pins to a high impedance state 

	EA = 1; 				//Global interrupt bit: Enable all interrupts 
	
	
	// P0.0  -  TX0 (UART0), Open-Drain, Digital (pin 20) 
    // P0.1  -  RX0 (UART0), Open-Drain, Digital (pin 21) 
    // ~~P0.2  -  TX1 (UART1), Open-Drain, Digital (pin 18)
    // ~~P0.3  -  RX1 (UART1), Open-Drain, Digital (pin 19) 
    

    XBR0      = 0x04;
    //XBR1      = 0x28;
    XBR2      = 0x44;

	SFRPAGE = SFRPAGE_SAVE;	// Restore SFR page.
}



//-------------------------------------------------------------------------------------------
// UART_Init
//-------------------------------------------------------------------------------------------
//
// Configure the UART0 using Timer1, for <baudrate> and 8-N-1.
//
void UART_Init(void)
{
	char SFRPAGE_SAVE = SFRPAGE;	// Save Current SFR page.

	SFRPAGE   = UART0_PAGE;
    
	//UART0 CONFIG
	SCON0     = 0x50;				//UART0 setup
    SSTA0     = 0x05;				//UART0 users Timer 2 for baud rate 
	TI0 	  = 1; 					//Indicates TX0 is ready 

	SFRPAGE	 = UART1_PAGE; 

	//UART1 CONFIG
	SCON1	  = 0x30; 				//UART1 setup (bits 4 and 5) 
	TI1		  = 1; 					//Indicates UART1 is ready 
	
	SFRPAGE = SFRPAGE_SAVE;			// Restore SFR page.
}


//-------------------------------------------------------------------------------------------
// Timer_Init
//-------------------------------------------------------------------------------------------
//

void Timer_Init(void)
{
    char SFRPAGE_SAVE = SFRPAGE; 
	
	//UART0 USERS TIMER 2
	SFRPAGE 		= TMR2_PAGE;
	
	TMR2CF			= 0x08; 	//Timer 2 uses SYSCLK
	TMR2CN			= 0x04; 
	TR2				= 1; 		//Timer 2 auto-reload, SYSCLK set in TMR2CF, turn on Timer2, Mode 1
	RCAP2L			= 0xBC; 	// Re load value for 9600 baud rate 
	RCAP2H			= 0xFE;	

	//UART 1 USES TIMER 1
	SFRPAGE   = TIMER01_PAGE; 
    TMOD      = 0x20;		//16-bit mode
 
    CKCON     = 0x10;		//SYSCLK
    TH1       = 0x28;		//reload value for 115200 baud rate 
	//TR1		  = 1;			//Turn Timer 1 on 
	TCON	  = 0x40;	

	SFRPAGE = SFRPAGE_SAVE; 
} 

//-------------------------------------------------------------------------------------------
// Oscillator_Init
//-------------------------------------------------------------------------------------------
//

void SYSCLK_Init()
{
    char SFRPAGE_SAVE = SFRPAGE; 
	
	int i = 0;
	SFRPAGE   = CONFIG_PAGE;
    OSCXCN    = 0x67; 			//stays constant for every lab 
    for (i = 0; i < 256; i++);  // Wait 1ms for initialization
    while ((OSCXCN & 0x80) == 0);
    CLKSEL = 0x01; 
	OSCICN = 0x00; 
	PLL0CN    = 0x04;
	SFRPAGE   = LEGACY_PAGE;
	FLSCL	  = 0x10; 
	SFRPAGE = CONFIG_PAGE; 
    PLL0CN    |= 0x01;
    PLL0DIV   = 0x04;
	PLL0FLT	  = 0x01; 
    PLL0MUL   = 0x09;
    for (i = 0; i < 256; i++);  // Wait 5us for initialization
    PLL0CN    |= 0x02;
    while ((PLL0CN & 0x10) == 0);
    CLKSEL    = 0x02; 	//SYSCLK derived from the PLL 

	SFRPAGE = SFRPAGE_SAVE; 
}


//-------------------------------------------------------------------------------------------
// UART0 ISR
//-------------------------------------------------------------------------------------------
//

void UART0_ISR(void)__interrupt 4
{
	if(RI0)
	{
		while(!TI0); 
		 
		choice = SBUF0;
		ES0=0; 
		RI0=0;	
		EIE2 |= 0x40;
		//printf("testing \r\n");
		
	} 
}


//-------------------------------------------------------------------------------------------
// UART1 ISR
//-------------------------------------------------------------------------------------------
//

void UART1_ISR(void)__interrupt 20
{
	if(RI1)
	{
		while(!TI1);
		  
		choice = SBUF1; 
		EIE2 &= ~0x40;
		RI1=0;
		//printf("testing UART1 page \r\n");
		 
	}
}
